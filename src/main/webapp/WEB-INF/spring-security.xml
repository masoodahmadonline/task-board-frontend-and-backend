<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
   http://www.springframework.org/schema/security
   http://www.springframework.org/schema/security/spring-security-3.1.xsd">
  
 <!-- This is where we configure Spring-Security  -->
    <security:http auto-config="true" use-expressions="true" access-denied-page="/access-denied" >

        <security:intercept-url pattern="/" access="permitAll"/>
        <security:intercept-url pattern="/favicon.ico" access="permitAll"/>  <!-- lolz -->
        <security:intercept-url pattern="/login" access="permitAll"/>
        <security:intercept-url pattern="/logout" access="permitAll"/>
        <security:intercept-url pattern="/access-denied" access="permitAll"/>
        <security:intercept-url pattern="/resources/**" access="permitAll"/>
        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>-->

        <!--Roles: ROLE_ADMIN ROLE_MANAGER ROLE_READER ROLE_NO_ACCESS ROLE_USER   -->
        <security:intercept-url pattern="/users/home" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER', 'ROLE_READER')"/>
        <security:intercept-url pattern="/users/create" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER')"/>
        <security:intercept-url pattern="/users/edit" method="GET" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER')"/>
        <security:intercept-url pattern="/users/edit" method="POST" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER')"/>
        <security:intercept-url pattern="/users/change-password" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER', 'ROLE_READER', 'ROLE_NO_ACCESS')"/>
        <security:intercept-url pattern="/users/profile-edit-personal" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER', 'ROLE_READER', 'ROLE_NO_ACCESS')"/>
        <security:intercept-url pattern="/users/profile-edit-technical" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER')"/>
        <security:intercept-url pattern="/boards/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER', 'ROLE_READER')"/>
        <security:intercept-url pattern="/task/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER')"/>
        <security:intercept-url pattern="/attachment/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER')"/>
        <security:intercept-url pattern="/box/**" access="hasAnyRole('ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_USER')"/>
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>
   
  <security:form-login
    login-page="/login"
    authentication-failure-url="/login?error=true"
    default-target-url="/users/home"
    always-use-default-target = "true"    />

  <!-- authentication-failure-url="/loginfail?error=true" -->   
  
  
  <security:logout
    invalidate-session="true"
    logout-success-url="/login"
    logout-url="/logout"/>
  
 </security:http>

  
 <!-- Declare an authentication-manager to use a custom userDetailsService -->
 <security:authentication-manager>
         <security:authentication-provider user-service-ref="customUserDetailsService">
  <!--         <security:password-encoder ref="passwordEncoder"/>-->
         </security:authentication-provider>
 </security:authentication-manager>
  
 <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database 
 <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
 -->
 <!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
 <bean id="customUserDetailsService" class="web.service.common.CustomUserDetailsService"/>
   <!--For loging security activity-->
    <!--<bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener" />-->

            

  
</beans>